version: 2.1
jobs:
  build_and_push:
    working_directory: ~/CircleCi
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      # - run:
      #     name: Run tests
      #     command: |
      #       docker-compose -f ./docker-compose.test.yml up
      - run:
          name: Build Docker image
          command: |
            docker build -t $DOCKER_HUB_USER_ID/nginx-app-marian:latest .
      - run:
          name: Push application Docker image
          command: |
            TAG=latest
            echo $DOCKER_HUB_PWD | docker login -u $DOCKER_HUB_USER_ID --password-stdin
            docker push $DOCKER_HUB_USER_ID/nginx-app-marian:$TAG
  deploy_vm:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys
      - run:
          name: Deploy over SSH
          command: |
            IMAGE="${DOCKER_HUB_USER_ID}/nginx-app-marian:latest"
            ssh -o StrictHostKeyChecking=no "${DEPLOY_USER}@${DEPLOY_HOST}" "IMAGE=$IMAGE bash -s" \<< 'EOF'
              set -euo pipefail
              APP="nginx-static"

              docker pull "$IMAGE"

              # pornește noul container pe port alternativ
              docker rm -f ${APP}_new 2>/dev/null || true
              docker run -d --name ${APP}_new -p 8081:80 --restart unless-stopped "$IMAGE"

              # healthcheck simplu
              for i in {1..20}; do
                if curl -fsS http://localhost:8081/ >/dev/null; then
                  echo "New container healthy."
                  break
                fi
                sleep 1
              done

              # comută pe portul stabil
              docker rm -f ${APP}_current 2>/dev/null || true
              docker rm -f ${APP} 2>/dev/null || true
              docker rm -f ${APP}_new || true
              docker run -d --name ${APP}_current -p 8080:80 --restart unless-stopped "$IMAGE"

              # delete la imagine veche
              docker image prune -f
            EOF
          no_output_timeout: 20m

workflows:
  build_test_deploy:
    jobs:
      - build_and_push:
          filters:
            branches:
              only: main
      - deploy_vm:
          requires:
            - build_and_push
          filters:
            branches:
              only: main